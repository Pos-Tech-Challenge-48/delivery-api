// Code generated by MockGen. DO NOT EDIT.
// Source: ./order_sorter.go

// Package ordersortermock is a generated GoMock package.
package ordersortermock

import (
	context "context"
	reflect "reflect"

	entities "github.com/Pos-Tech-Challenge-48/delivery-api/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderSorter is a mock of OrderSorter interface.
type MockOrderSorter struct {
	ctrl     *gomock.Controller
	recorder *MockOrderSorterMockRecorder
}

// MockOrderSorterMockRecorder is the mock recorder for MockOrderSorter.
type MockOrderSorterMockRecorder struct {
	mock *MockOrderSorter
}

// NewMockOrderSorter creates a new mock instance.
func NewMockOrderSorter(ctrl *gomock.Controller) *MockOrderSorter {
	mock := &MockOrderSorter{ctrl: ctrl}
	mock.recorder = &MockOrderSorterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderSorter) EXPECT() *MockOrderSorterMockRecorder {
	return m.recorder
}

// GetAllSortedByStatus mocks base method.
func (m *MockOrderSorter) GetAllSortedByStatus(ctx context.Context) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSortedByStatus", ctx)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSortedByStatus indicates an expected call of GetAllSortedByStatus.
func (mr *MockOrderSorterMockRecorder) GetAllSortedByStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSortedByStatus", reflect.TypeOf((*MockOrderSorter)(nil).GetAllSortedByStatus), ctx)
}
